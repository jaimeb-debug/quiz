<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz de Farmacología Médica</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8; /* Light blue-gray background */
            color: #1f2937; /* Darker gray text */
        }
        /* 3D Card Flip Styles */
        .flip-card {
            background-color: transparent;
            width: 100%;
            min-height: 360px; /* Adjusted height */
            perspective: 1000px;
            display: flex;
            flex-direction: column;
        }

        .flip-card-inner {
            position: relative;
            width: 100%;
            height: 100%;
            text-align: center;
            transition: transform 0.6s;
            transform-style: preserve-3d;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
            border-radius: 0.5rem;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }

        .flip-card.flipped .flip-card-inner {
            transform: rotateY(180deg);
        }

        .flip-card-front, .flip-card-back {
            position: absolute;
            width: 100%;
            height: 100%;
            -webkit-backface-visibility: hidden;
            backface-visibility: hidden;
            border-radius: 0.5rem;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            overflow: hidden;
        }

        .flip-card-front {
            background-color: white;
            color: black;
            justify-content: flex-start;
        }

        .flip-card-front .question-text {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 0.75rem;
            text-align: left;
            flex-shrink: 0;
        }

        .flip-card-front .options-container {
            margin-top: auto;
            overflow-y: auto;
            max-height: calc(100% - 4rem); /* Adjust based on question text height */
             padding-bottom: 0.5rem; /* Add some padding at the bottom */
        }


        .flip-card-back {
            background-color: #3498db;
            color: white;
            transform: rotateY(180deg);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 1.5rem;
        }

        .flip-card-back.correct {
            background-color: #2ecc71;
        }

        .flip-card-back.incorrect {
            background-color: #e74c3c;
        }

        .flip-card-back .icon {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }
        .flip-card-back .justification {
            font-size: 0.9rem; /* Slightly larger justification */
            text-align: center;
            margin-top: 0.75rem;
            max-height: 150px; /* Increase max height */
            overflow-y: auto;
            padding: 0 0.5rem;
        }

        /* Options styling */
        .option {
            cursor: pointer;
            padding: 0.7rem 0.9rem; /* Increased padding */
            margin: 0.4rem 0; /* Increased margin */
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
            transition: background-color 0.2s, border-color 0.2s;
            text-align: left;
            background-color: #f9fafb;
            font-size: 0.9rem;
            white-space: normal;
            word-wrap: break-word;
            line-height: 1.4; /* Improve line spacing */
        }
        .option:hover {
            background-color: #e5e7eb;
            border-color: #9ca3af;
        }
        .option.selected {
            background-color: #dbeafe;
            border-color: #3b82f6;
        }
        .option:disabled {
             cursor: not-allowed;
             opacity: 0.7;
        }


        /* Layout adjustments */
         #quiz-container {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
             max-width: 1200px;
        }
        #question-area {
            flex-grow: 1;
            display: grid;
            gap: 1rem;
            grid-template-columns: repeat(1, minmax(0, 1fr));
        }
        @media (min-width: 768px) {
            #question-area {
                grid-template-columns: repeat(2, minmax(0, 1fr));
                gap: 1.25rem;
            }
        }
        @media (min-width: 1024px) {
            #question-area {
                grid-template-columns: repeat(3, minmax(0, 1fr));
                gap: 1.5rem;
            }
             .flip-card-front .question-text { font-size: 1.05rem; }
             .option { font-size: 0.95rem; }
        }
        @media (min-width: 1280px) {
             /* Removed fixed min-height for cards to allow natural sizing */
        }

         #navigation-buttons button {
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
        }
         @media (min-width: 768px) {
             #navigation-buttons button {
                padding: 0.5rem 1.5rem;
                font-size: 1rem;
            }
        }

    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div id="quiz-container" class="container mx-auto p-4 md:p-6 lg:p-8 flex flex-col min-h-screen">
        <h1 class="text-3xl md:text-4xl font-bold text-center mb-4 md:mb-6 text-blue-700">Quiz de Farmacología Médica</h1>

        <div id="chapter-info" class="text-center mb-4 md:mb-6">
            <h2 id="chapter-title" class="text-xl md:text-2xl font-semibold text-gray-700">Cargando...</h2>
            <p id="progress-indicator" class="text-xs md:text-sm text-gray-500"></p>
        </div>

        <div id="question-area" class="mb-6 md:mb-8 flex-grow">
            <p class="text-center text-gray-500">Cargando preguntas...</p>
        </div>

        <div id="navigation-buttons" class="flex justify-between mt-auto pt-4">
             <button id="prev-btn" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 md:px-6 rounded-lg transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed">
                Anterior
            </button>
            <button id="next-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 md:px-6 rounded-lg transition duration-200">
                Siguiente
            </button>
             <button id="finish-btn" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 md:px-6 rounded-lg transition duration-200 hidden">
                Finalizar
            </button>
        </div>

        <div id="results-screen" class="hidden text-center p-6 bg-white rounded-lg shadow-lg max-w-2xl mx-auto mt-10">
            <h2 class="text-2xl md:text-3xl font-bold mb-4 text-blue-700">Resultados del Quiz</h2>
            <div id="results-summary" class="mb-6 space-y-2 text-base md:text-lg">
                </div>
            <p id="total-score" class="text-lg md:text-xl font-semibold mb-6"></p>
            <button id="restart-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg transition duration-200">
                Reiniciar Quiz
            </button>
        </div>
    </div>

    <script>
        // --- Variable to hold quiz data ---
        let quizData = []; // Initialize as empty array

        // --- Function to fetch and load quiz data ---
        async function loadQuizData() {
            try {
                // Fetch the JSON file (make sure farma.json is in the same directory or provide the correct path)
                const response = await fetch('farma.json');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();

                // Map the JSON structure to the expected quizData structure
                quizData = data.map(chapter => ({
                    chapter: chapter.Capítulo,
                    questions: chapter.Preguntas.map(q => {
                        // Extract answer text without the leading "x) " part
                        const correctAnswerParts = q['Respuesta Correcta'].match(/^[a-z]\)\s*(.*)/i);
                        const correctAnswerText = correctAnswerParts ? correctAnswerParts[1] : q['Respuesta Correcta'];

                        return {
                            question: q.Pregunta,
                            // Convert options object {a: 'text', b: 'text'} to array ['text', 'text']
                            options: Object.values(q.Opciones),
                            answer: correctAnswerText,
                            // Use a default justification since it's not in the JSON
                            justification: `La respuesta correcta es ${correctAnswerText}.`
                        };
                    })
                }));

                // Initialize chapterScores based on loaded data
                chapterScores = Array(quizData.length).fill(0);

                // --- Initial Load ---
                displayQuestions(); // Call displayQuestions AFTER data is loaded and scores initialized

            } catch (error) {
                console.error("Could not load quiz data:", error);
                // Display an error message to the user in the HTML
                const quizContainer = document.getElementById('quiz-container');
                quizContainer.innerHTML = `
                    <div class="text-center p-10">
                        <h1 class="text-2xl font-bold text-red-600 mb-4">Error al cargar las preguntas</h1>
                        <p class="text-gray-700">No se pudo cargar el archivo 'farma.json'.</p>
                        <p class="text-gray-500 mt-2">Asegúrate de que el archivo está en la misma carpeta que este archivo HTML y que el formato JSON es correcto.</p>
                        <p class="text-gray-500 mt-1">Error detallado: ${error.message}</p>
                    </div>`;
                 // Hide navigation buttons if loading fails
                 document.getElementById('navigation-buttons').style.display = 'none';
            }
        }


        // --- Quiz Logic ---
        let currentChapterIndex = 0;
        let chapterScores = []; // Initialized in loadQuizData
        let questionsAnsweredInChapter = 0;
        let currentQuestions = []; // Stores the 3 randomly selected questions for the chapter

        const chapterTitleEl = document.getElementById('chapter-title');
        const progressIndicatorEl = document.getElementById('progress-indicator');
        const questionAreaEl = document.getElementById('question-area');
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const finishBtn = document.getElementById('finish-btn');
        const resultsScreenEl = document.getElementById('results-screen');
        const resultsSummaryEl = document.getElementById('results-summary');
        const totalScoreEl = document.getElementById('total-score');
        const restartBtn = document.getElementById('restart-btn');
        const navigationButtonsEl = document.getElementById('navigation-buttons');
        const quizContainerEl = document.getElementById('quiz-container');


        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]]; // Swap elements
            }
            return array;
        }

        function selectRandomQuestions(allQuestions, numQuestions = 3) {
             // Ensure we don't try to select more questions than available
            const count = Math.min(numQuestions, allQuestions.length);
            // Shuffle the original array and take the first 'count' elements
            return shuffleArray([...allQuestions]).slice(0, count);
        }

         function displayQuestions() {
            if (!quizData || quizData.length === 0) {
                console.error("Quiz data is not loaded or empty.");
                // Error message is handled in loadQuizData, but we can prevent further execution
                questionAreaEl.innerHTML = '<p class="text-center text-red-500">No se pudieron mostrar las preguntas.</p>';
                return;
            }
             if (currentChapterIndex >= quizData.length) {
                 console.error("Invalid chapter index.");
                 return; // Avoid errors if index is out of bounds
             }


            questionAreaEl.innerHTML = ''; // Clear previous questions
            questionsAnsweredInChapter = 0; // Reset counter for the new chapter
            const chapterData = quizData[currentChapterIndex];
            chapterTitleEl.textContent = chapterData.chapter;
            progressIndicatorEl.textContent = `Capítulo ${currentChapterIndex + 1} de ${quizData.length}`;

            // Select 3 random questions for this chapter display
            currentQuestions = selectRandomQuestions(chapterData.questions, 3);

             if (currentQuestions.length === 0) {
                 questionAreaEl.innerHTML = '<p class="text-center text-gray-500">No hay preguntas disponibles para este capítulo.</p>';
                  // Enable navigation if there are no questions to answer
                 checkChapterCompletion();
                 return;
             }

            currentQuestions.forEach((q, index) => {
                const card = document.createElement('div');
                card.className = 'flip-card';
                card.dataset.questionIndex = index;

                const cardInner = document.createElement('div');
                cardInner.className = 'flip-card-inner';

                // Front of the card
                const cardFront = document.createElement('div');
                cardFront.className = 'flip-card-front';

                const questionText = document.createElement('p');
                questionText.className = 'question-text';
                questionText.textContent = `${index + 1}. ${q.question}`;

                const optionsContainer = document.createElement('div');
                optionsContainer.className = 'options-container space-y-1';

                // Shuffle options for display
                const shuffledOptions = shuffleArray([...q.options]);

                shuffledOptions.forEach(option => {
                    const optionButton = document.createElement('button');
                    optionButton.className = 'option w-full';
                    optionButton.textContent = option;
                    // Pass the necessary info for checking the answer
                    optionButton.onclick = () => handleAnswer(card, optionButton, option, q.answer, q.justification);
                    optionsContainer.appendChild(optionButton);
                });
                cardFront.appendChild(questionText);
                cardFront.appendChild(optionsContainer);

                // Back of the card
                const cardBack = document.createElement('div');
                cardBack.className = 'flip-card-back';
                // Content for the back will be added in handleAnswer

                cardInner.appendChild(cardFront);
                cardInner.appendChild(cardBack);
                card.appendChild(cardInner);
                questionAreaEl.appendChild(card);
            });

            updateNavigationButtons();
        }


        function handleAnswer(cardElement, selectedButton, selectedAnswer, correctAnswer, justification) {
            if (cardElement.classList.contains('answered')) return;
            cardElement.classList.add('answered');

            const options = cardElement.querySelectorAll('.option');
             options.forEach(btn => {
                btn.disabled = true;
                if (btn === selectedButton) {
                    btn.classList.add('selected');
                }
            });

            // Trim potential whitespace for comparison
            const isCorrect = selectedAnswer.trim() === correctAnswer.trim();
            const cardBack = cardElement.querySelector('.flip-card-back');
            cardBack.innerHTML = ''; // Clear previous back content

            const icon = document.createElement('span');
            icon.className = 'icon';

            const justificationText = document.createElement('p');
            justificationText.className = 'justification';


            if (isCorrect) {
                if (chapterScores[currentChapterIndex] !== undefined) {
                   chapterScores[currentChapterIndex]++;
                }
                cardBack.classList.add('correct');
                cardBack.classList.remove('incorrect');
                icon.textContent = '✓';
                 justificationText.textContent = justification || "¡Correcto!"; // Use provided or default justification
            } else {
                cardBack.classList.add('incorrect');
                cardBack.classList.remove('correct');
                icon.textContent = '✗';
                 // Show the correct answer on the back if answered incorrectly
                 justificationText.textContent = `Incorrecto. La respuesta correcta era: "${correctAnswer}". ${justification || ''}`;
            }

             cardBack.appendChild(icon);
             cardBack.appendChild(justificationText);


            // Flip the card
            cardElement.classList.add('flipped');

            questionsAnsweredInChapter++;
            checkChapterCompletion();
        }

         function checkChapterCompletion() {
            // Check if all displayed questions for the current chapter are answered
            // Or if there were no questions to begin with
            if (questionsAnsweredInChapter >= currentQuestions.length) {
                 if (currentChapterIndex < quizData.length - 1) {
                    nextBtn.disabled = false;
                 } else {
                    finishBtn.disabled = false;
                 }
            }
        }


        function updateNavigationButtons() {
            // Ensure quizData is loaded before accessing its length
             const numChapters = quizData ? quizData.length : 0;

            prevBtn.disabled = currentChapterIndex === 0;
            nextBtn.disabled = true; // Disable until chapter is complete
            finishBtn.disabled = true; // Disable until chapter is complete


            if (numChapters === 0) {
                 // If no data loaded, disable all navigation
                 prevBtn.disabled = true;
                 nextBtn.classList.add('hidden');
                 finishBtn.classList.add('hidden');
                 return;
             }


            if (currentChapterIndex === numChapters - 1) {
                nextBtn.classList.add('hidden');
                finishBtn.classList.remove('hidden');
                finishBtn.disabled = true; // Keep disabled initially
            } else {
                nextBtn.classList.remove('hidden');
                finishBtn.classList.add('hidden');
                nextBtn.disabled = true; // Keep disabled initially
            }

             // Re-enable previous button if not on the first chapter
             if (currentChapterIndex > 0) {
                 prevBtn.disabled = false;
             }
        }

        function showNextChapter() {
             // Ensure quizData is loaded
             if (!quizData || quizData.length === 0) return;

            if (currentChapterIndex < quizData.length - 1) {
                currentChapterIndex++;
                displayQuestions();
            }
        }

        function showPrevChapter() {
            if (currentChapterIndex > 0) {
                currentChapterIndex--;
                displayQuestions();
            }
        }

        function showResults() {
            // Hide main quiz content and show results screen
            const quizContentElements = document.querySelectorAll('#quiz-container > *:not(#results-screen)');
            quizContentElements.forEach(el => el.style.display = 'none');
            navigationButtonsEl.style.display = 'none'; // Hide nav buttons

            resultsScreenEl.classList.remove('hidden');
            resultsScreenEl.style.display = 'block'; // Ensure it's visible


            resultsSummaryEl.innerHTML = ''; // Clear previous results
            let totalCorrect = 0;
            const totalQuestionsPerChapter = 3; // We display 3 questions per chapter

             // Ensure quizData is loaded before iterating
             if (!quizData || quizData.length === 0) {
                 resultsSummaryEl.innerHTML = '<p>No hay datos de capítulos para mostrar resultados.</p>';
                 totalScoreEl.textContent = 'Puntuación Total: 0 de 0 correctas';
                 return;
             }


            quizData.forEach((chapterData, index) => {
                const chapterResult = document.createElement('p');
                 // Handle cases where score might be undefined if chapter wasn't visited or had errors
                const score = chapterScores[index] !== undefined ? chapterScores[index] : 0;
                totalCorrect += score;
                // Calculate the number of questions actually attempted in this chapter
                // (It's always 3 in the current design, but could be less if JSON changes)
                const attemptedQuestions = Math.min(totalQuestionsPerChapter, chapterData.questions.length);

                chapterResult.textContent = `Capítulo ${index + 1} (${chapterData.chapter}): ${score} de ${attemptedQuestions} correctas`;
                resultsSummaryEl.appendChild(chapterResult);
            });

            const totalQuestionsOverall = quizData.reduce((total, chapter) => total + Math.min(totalQuestionsPerChapter, chapter.questions.length), 0);
            totalScoreEl.textContent = `Puntuación Total: ${totalCorrect} de ${totalQuestionsOverall} correctas`;
        }

         function restartQuiz() {
             // Ensure quizData is loaded before restarting
             if (!quizData || quizData.length === 0) {
                 // If data wasn't loaded, attempt to load it again
                 loadQuizData();
                 return;
             }

            currentChapterIndex = 0;
            // Re-initialize scores based on loaded data length
            chapterScores = Array(quizData.length).fill(0);
            questionsAnsweredInChapter = 0;

             // Hide results screen and show main quiz content
             resultsScreenEl.classList.add('hidden');
             resultsScreenEl.style.display = 'none';
             const quizContentElements = document.querySelectorAll('#quiz-container > *:not(#results-screen)');
             quizContentElements.forEach(el => el.style.display = 'flex'); // Or 'block'/'grid' as appropriate
             document.getElementById('chapter-info').style.display='block'; // Ensure chapter info visible
             document.getElementById('question-area').style.display='grid'; // Ensure question area visible
             navigationButtonsEl.style.display = 'flex'; // Show nav buttons again


            displayQuestions(); // Reload questions for chapter 0
        }

        // --- Event Listeners ---
        nextBtn.addEventListener('click', showNextChapter);
        prevBtn.addEventListener('click', showPrevChapter);
        finishBtn.addEventListener('click', showResults);
        restartBtn.addEventListener('click', restartQuiz);

        // --- Initial Load ---
        // Call the function to load data when the script runs
        loadQuizData();

    </script>

</body>
</html>